# configuration variables:
#  BUNDLE_SPEC_OUTPUT
#  BUNDLE_SPEC_INPUT

# -- build an xml tag
# usage: xml(VAR foo bar) --> VAR = "<foo>bar</foo>"
macro(xml VAR_ELEMENT TAG_NAME CONTENT)
	set(${VAR_ELEMENT} <${TAG_NAME}>${CONTENT}</${TAG_NAME}>)
endmacro()

# -- convert a cmake list to a comma delineated string
# usage: list_to_comma_separated(VAR ${list} [..])
macro(list_to_comma_separated VAR_NAME)
	set(${VAR_NAME} ${ARGV1})
	if(${ARGC} GREATER 2)
		list(APPEND remaining_args ${ARGN})
		list(REMOVE_AT remaining_args 0)
		foreach(arg ${remaining_args}) 
			set(${VAR_NAME} ${${VAR_NAME}},${arg})
		endforeach()
	endif()
endmacro()

macro(split str sep var_head var_tail)
	string(LENGTH "${str}" length)
	if(length GREATER 0)
		string(FIND "${str}" "${sep}" index)
		if(${index} GREATER -1)
			string(SUBSTRING "${str}" 0 ${index} ${var_head})
			math(EXPR index ${index}+1)
			string(SUBSTRING "${str}" ${index} -1 ${var_tail})
		else()
			set(${var_head} "${str}")
			unset(${var_tail})
		endif()
	else()
		unset(${var_head})
		unset(${var_tail})
	endif()	
endmacro()

# build all xml tags
if(POCO_BUNDLE_VENDOR)
	xml(POCO_BUNDLE_VENDOR_ELEMENT vendor ${POCO_BUNDLE_VENDOR})
endif()
if(POCO_BUNDLE_COPYRIGHT)
	xml(POCO_BUNDLE_COPYRIGHT_ELEMENT copyright ${POCO_BUNDLE_COPYRIGHT})
endif()
if(POCO_BUNDLE_ACTIVATOR_CLASS AND POCO_BUNDLE_ACTIVATOR_LIBRARY)
	xml(POCO_BUNDLE_ACTIVATOR_CLASS_ELEMENT class ${POCO_BUNDLE_ACTIVATOR_CLASS})
	xml(POCO_BUNDLE_ACTIVATOR_LIBRARY_ELEMENT library ${POCO_BUNDLE_ACTIVATOR_LIBRARY})
	xml(POCO_BUNDLE_ACTIVATOR_ELEMENT activator "${POCO_BUNDLE_ACTIVATOR_CLASS_ELEMENT}${POCO_BUNDLE_ACTIVATOR_LIBRARY_ELEMENT}")
endif()
if(POCO_BUNDLE_LAZY_START)
	xml(POCO_BUNDLE_LAZY_START_ELEMENT lazyStart ${POCO_BUNDLE_LAZY_START})
endif()
if(POCO_BUNDLE_RUN_LEVEL)
	xml(POCO_BUNDLE_RUN_LEVEL_ELEMENT runLevel ${POCO_BUNDLE_RUN_LEVEL})
endif()
if(POCO_BUNDLE_DEPENDENCY)
	# workaround for cmake bug 9317 leading to erroneous list operations with square brackets
	# http://public.kitware.com/Bug/view.php?id=9317
	set(list_sep ",")
	set(dep_sep "@")
	split("${POCO_BUNDLE_DEPENDENCY}" "${list_sep}" head tail)
	string(LENGTH "${head}" length)
	while(length GREATER 0)
		split("${head}" "${dep_sep}" depSymbolicName depVersion)
		split("${tail}" "${list_sep}" head tail)
		string(LENGTH "${head}" length)
		xml(DEPENDENCY_SYMBOLIC_NAME_ELEMENT symbolicName ${depSymbolicName})
		xml(DEPENDENCY_VERSION_ELEMENT version ${depVersion})
		xml(DEPENDENCY_ELEMENT dependency "${DEPENDENCY_SYMBOLIC_NAME_ELEMENT}${DEPENDENCY_VERSION_ELEMENT}")
		set(POCO_BUNDLE_DEPENDENCY_ELEMENT "${POCO_BUNDLE_DEPENDENCY_ELEMENT}${DEPENDENCY_ELEMENT}")
	endwhile()
endif()
if(POCO_BUNDLE_EXTENDS)
	xml(POCO_BUNDLE_EXTENDS_ELEMENT extends ${POCO_BUNDLE_EXTENDS})
endif()
if(POCO_BUNDLE_CODE)
	list_to_comma_separated(POCO_BUNDLE_CODE_COMMA_SEP ${POCO_BUNDLE_CODE})
	xml(POCO_BUNDLE_CODE_ELEMENT code ${POCO_BUNDLE_CODE_COMMA_SEP})
endif()
if(POCO_BUNDLE_FILES)
	list_to_comma_separated(POCO_BUNDLE_FILES_COMMA_SEP ${POCO_BUNDLE_FILES})
	xml(POCO_BUNDLE_FILES_ELEMENT files ${POCO_BUNDLE_FILES_COMMA_SEP})
endif()	

configure_file("${POCO_BUNDLE_SPEC_INPUT}" "${POCO_BUNDLE_SPEC_OUTPUT}")
message(STATUS "Bundle specification written to ${POCO_BUNDLE_SPEC_OUTPUT}")